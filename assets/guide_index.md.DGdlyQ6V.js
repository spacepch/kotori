import{_ as a,c as t,o as e,V as r}from"./chunks/framework.Dy019jra.js";const S=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1715495752000}'),i={name:"guide/index.md"},o=r('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>阅读本章前请确保你已阅读完毕 <a href="./../basic/start.html">入门教程</a>。</p></div><h2 id="前置要求" tabindex="-1">前置要求 <a class="header-anchor" href="#前置要求" aria-label="Permalink to &quot;前置要求&quot;">​</a></h2><ul><li>拥有一定的 JavaScript 与 Node.js 知识基础。</li></ul><p>Kotori 运行于 Node.js 环境，因此开发 Kotori 模块前掌握 JavaScript 与 Node.js 基础内容是必然的。此处推荐几个文档：</p><ul><li><a href="https://wangdoc.com/javascript" target="_blank" rel="noreferrer">JavaScript 教程</a></li><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">ECMAScript 6 入门教程</a></li></ul><blockquote><p>基于 TypeScript 与现代化 ECMAScript 开发。</p></blockquote><p>TypeScript 是 JavaScript 的超集，TypeScript 在继承了 JavaScript 全部特性的同时，为弱类型动态语言的 JavaScript 提供了一个独立且强大的类型系统。同时，使用 TypeScript 基本意味着使用 ESModule 与现代化的 JavaScript 语法与规范，这是 Kotori 三大特点之一。理论上在 Kotori 程序的生产环境中可正常运行由 JavaScript 直接编写的模块，但 Kotori 本身便使用 TypeScript 开发，因此更推荐你使用 TypeScript 用于你的模块开发，尽管这并不是必须的。</p><ul><li><a href="https://wangdoc.com/typescript" target="_blank" rel="noreferrer">TypeScript 教程</a></li></ul><h2 id="读后" tabindex="-1">读后 <a class="header-anchor" href="#读后" aria-label="Permalink to &quot;读后&quot;">​</a></h2><ul><li><a href="./../api/">接口文档</a> 用于全面了解与查阅 Kotori 提供的所有公开 API。</li><li><a href="./../advanced/">深入了解</a> Kotori 的开发历程、版本记录、运行流程、设计构思、设计参考等。</li></ul>',11),c=[o];function l(p,s,n,d,h,_){return e(),t("div",null,c)}const f=a(i,[["render",l]]);export{S as __pageData,f as default};
